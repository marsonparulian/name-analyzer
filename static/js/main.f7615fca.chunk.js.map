{"version":3,"sources":["components/actionTypes.js","components/organisms/InputForm/inputFormReducer.js","components/organisms/ResultPanel/resultPanelReducer.js","configs/texts.js","components/molecules/ResultAge/resultAgeDefault.js","components/molecules/ResultAge/resultAgeReducer.js","components/molecules/ResultGender/resultGenderDefault.js","components/molecules/ResultGender/resultGenderReducer.js","components/organisms/InputForm/inputFormDefault.js","components/organisms/ResultPanel/resultPanelDefault.js","components/store.js","services/nameService.js","components/organisms/InputForm/inputFormActions.js","components/organisms/InputForm/InputForm.js","components/organisms/InputForm/InputFormContainer.js","components/molecules/ResultAge/ResultAge.js","components/molecules/ResultAge/ResultAgeContainer.js","components/molecules/ResultGender/ResultGender.js","components/molecules/ResultGender/ResultGenderContainer.js","components/organisms/ResultPanel/ResultPanel.js","components/organisms/ResultPanel/ResultPanelContainer.js","components/pages/NameAnalyzerPage.js","components/organisms/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["actionTypes","UPDATE_NAME_INPUT","SUBMIT_INPUT_FORM","ANALYZE_NAME_OK","ANALYZE_NAME_ERROR","ANALYZE_GENDER_OK","ANALYZE_GENDER_ERROR","inputFormReducer","state","action","type","newState","cloneDeep","nameInput","value","payload","reducer","msg","name","texts","NAME_INPUT_PLACEHOLDER","SUBMIT_BUTTON_TEXT","RESULT_PANEL_DEFAULT_MSG","RESULT_PANEL_HEADER_PRE_TEXT","RESULT_AGE_BUSY_TEXT","RESULT_AGE_OK_PRE_TEXT","RESULT_AGE_ERROR_TEXT","RESULT_GENDER_BUSY_TEXT","RESULT_GENDER_OK_PRE_TEXT","RESULT_GENDER_ERROR_TEXT","defaultState","status","age","resultAgeDefault","gender","resultGenderDefault","resultPanelDefault","rootReducer","combineReducers","inputForm","resultPanel","resultPanelReducer","resultAge","resultAgeReducer","resultGender","resultGenderReducer","defaultRootState","inputFormDefault","store","createStore","applyMiddleware","reduxThunk","analyzeNameForAge","a","country","url","crossFetch","response","ok","Promise","reject","json","result","analyzeNameForGender","Error","updateNameInput","submitInputForm","data","dispatch","submitFormStarted","then","analyzeAgeOk","catch","e","analyzeAgeError","analyzeGenderOk","analyzeGenderError","InputForm","props","onNameChange","handleNameChange","useCallback","target","onSubmit","handleSubmit","preventDefault","id","className","placeholder","onChange","disabled","connect","bindActionCreators","ResultAge","preText","ResultGender","proptTypes","ProptTypes","string","isRequired","ResultPanel","content","style","margin","createHeaderText","ResultAgeContainer","ResultGenderContainer","NameAnalyzerPage","InputFormContainer","ResultPanelContainer","Footer","href","rel","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f7615fca.chunk.js","sourcesContent":["// Action types\r\nconst actionTypes = {\r\n\r\n    UPDATE_NAME_INPUT: \"UPDATE_NAME_INPUT\",\r\n    SUBMIT_INPUT_FORM: \"SUBMIT_INPUT_FORM    \",\r\n    ANALYZE_NAME_OK: \"ANALYZE_NAME_OK\",\r\n    ANALYZE_NAME_ERROR: \"ANALYZE_NAME_ERROR\",\r\n    ANALYZE_GENDER_OK: \"ANALYZE_GENDER_OK\",\r\n    ANALYZE_GENDER_ERROR: \"ANALYZE_GENDER_ERROR\",\r\n}\r\nexport default actionTypes;\r\n","// Reducer for inputForm\r\nimport cloneDeep from \"lodash/cloneDeep\";\r\nimport actionTypes from \"../../actionTypes\";\r\n\r\nconst inputFormReducer = (state = null, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.UPDATE_NAME_INPUT:\r\n            const newState = cloneDeep(state);\r\n\r\n            // Update name input's value\r\n            newState.nameInput.value = action.payload;\r\n\r\n            return newState;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default inputFormReducer;\r\n","// Reducer for <ResultPanel /> state\r\nimport cloneDeep from \"lodash/cloneDeep\";\r\nimport actionTypes from \"../../actionTypes\";\r\nconst reducer = (state = null, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.SUBMIT_INPUT_FORM:\r\n            const newState = cloneDeep(state);\r\n\r\n            // Clear the `msg` to mark the form has been submitted\r\n            newState.msg = \"\";\r\n            // The name to be displayed\r\n            newState.name = action.payload.name\r\n\r\n            return newState;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default reducer;\r\n","//Static text used as labels, messages, etc\r\n\r\nconst texts = {\r\n    NAME_INPUT_PLACEHOLDER: \"Single word name..\",\r\n    SUBMIT_BUTTON_TEXT: \"Analyze\",\r\n    RESULT_PANEL_DEFAULT_MSG: \"Type a name above to be analyzed\",\r\n    RESULT_PANEL_HEADER_PRE_TEXT: \"Showing result\",\r\n    // Text messages for result by age\r\n    RESULT_AGE_BUSY_TEXT: \"Predicting age..\",\r\n    RESULT_AGE_OK_PRE_TEXT: \"Predicted age : \",\r\n    RESULT_AGE_ERROR_TEXT: \"Error. Unable to predict the age.\",\r\n    // Text messages for result by gender\r\n    RESULT_GENDER_BUSY_TEXT: \"Predicting gender..\",\r\n    RESULT_GENDER_OK_PRE_TEXT: \"Predicted gender : \",\r\n    RESULT_GENDER_ERROR_TEXT: \"Error. Unable to predict the gender.\",\r\n}\r\nexport default texts;\r\n","// Default state for <ResultAge />\r\nconst defaultState = {\r\n    // Status for result. Possibilities: `ok`, `error`.\r\n    status: \"ok\",\r\n    // Message to show when `busy` or `error`. If not falsy, the component will show this message.\r\n    msg: \"\",\r\n    // The predicted age\r\n    age: 0,\r\n}\r\nexport default defaultState;\r\n","// Reducer for <ResultAge /> state\r\nimport cloneDeep from \"lodash/cloneDeep\";\r\nimport actionTypes from \"../../actionTypes\";\r\nimport texts from \"../../../configs/texts\";\r\nimport resultAgeDefault from \"./resultAgeDefault\";\r\n\r\nconst reducer = (state = null, action) => {\r\n    let newState;\r\n    switch (action.type) {\r\n        case actionTypes.ANALYZE_NAME_ERROR:\r\n            newState = cloneDeep(state);\r\n\r\n            // Set error message\r\n            newState.msg = texts.RESULT_AGE_ERROR_TEXT;\r\n\r\n            return newState\r\n        case actionTypes.ANALYZE_NAME_OK:\r\n            newState = cloneDeep(state);\r\n\r\n            // Clear the message\r\n            newState.msg = \"\";// Assign the age\r\n            // Assign the result\r\n            newState.age = action.payload;\r\n\r\n            return newState;\r\n\r\n        case actionTypes.SUBMIT_INPUT_FORM:\r\n            newState = cloneDeep(state);\r\n\r\n            // Set the message\r\n            newState.msg = texts.RESULT_AGE_BUSY_TEXT;\r\n            // Reset the age\r\n            newState.age = resultAgeDefault.age;\r\n\r\n            return newState;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default reducer;\r\n","// Default state form <ResultGender />\r\n\r\nconst defaultState = {\r\n    // Possible values: `ok`, `error`.\r\n    status: 'ok',\r\n    // If not falsy, will show this message. This message is used to show 'busy' or 'error' message\r\n    msg: \"\",\r\n    // The predicted gender\r\n    gender: \"\",\r\n}\r\nexport default defaultState;\r\n","// <ResultGender /> state reducer\r\nimport cloneDeep from \"lodash/cloneDeep\";\r\nimport actionTypes from \"../../actionTypes\";\r\nimport texts from \"../../../configs/texts\";\r\nimport resultGenderDefault from \"./resultGenderDefault\";\r\n\r\nconst reducer = (state = null, action) => {\r\n    let newState;\r\n    switch (action.type) {\r\n        case actionTypes.ANALYZE_GENDER_OK:\r\n            newState = cloneDeep(resultGenderDefault);\r\n\r\n            // Set the gender\r\n            newState.gender = action.payload;\r\n\r\n            return newState;\r\n\r\n        case actionTypes.ANALYZE_GENDER_ERROR:\r\n            // Reset the state\r\n            newState = cloneDeep(resultGenderDefault);\r\n\r\n            // Set error message\r\n            newState.msg = texts.RESULT_GENDER_ERROR_TEXT;\r\n\r\n            return newState;\r\n\r\n        case actionTypes.SUBMIT_INPUT_FORM:\r\n            newState = cloneDeep(state);\r\n\r\n            // Set the message\r\n            newState.msg = texts.RESULT_GENDER_BUSY_TEXT;\r\n\r\n            return newState;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default reducer;\r\n","// Default state for <InputForm />\r\nconst state = {\r\n    // The `name` input props / state\r\n    nameInput: {\r\n        value: \"\",\r\n    }\r\n}\r\nexport default state;\r\n","// Default state for <ResultPanel />\r\nimport texts from \"../../../configs/texts\";\r\n\r\nconst resultPanelDefault = {\r\n    msg: texts.RESULT_PANEL_DEFAULT_MSG,\r\n    // The input name\r\n    name: \"\",\r\n};\r\n\r\nexport default resultPanelDefault;\r\n","// Store\r\nimport { combineReducers, applyMiddleware, createStore } from \"redux\";\r\nimport reduxThunk from \"redux-thunk\";\r\n\r\n// Import Reducers\r\nimport inputFormReducer from \"./organisms/InputForm/inputFormReducer\";\r\nimport resultPanelReducer from \"./organisms/ResultPanel/resultPanelReducer\"\r\nimport resultAgeReducer from \"./molecules/ResultAge/resultAgeReducer\";\r\nimport resultGenderReducer from \"./molecules/ResultGender/resultGenderReducer\";\r\n\r\n// Import default state\r\nimport inputFormDefault from \"./organisms/InputForm/inputFormDefault\";\r\nimport resultPanelDefault from \"./organisms/ResultPanel/resultPanelDefault\";\r\nimport resultAgeDefault from \"./molecules/ResultAge/resultAgeDefault\";\r\nimport resultGenderDefault from \"./molecules/ResultGender/resultGenderDefault\";\r\n\r\n// Root reducer\r\nexport const rootReducer = combineReducers({\r\n    inputForm: inputFormReducer,\r\n    resultPanel: resultPanelReducer,\r\n    resultAge: resultAgeReducer,\r\n    resultGender: resultGenderReducer,\r\n});\r\n\r\n// Default root state\r\nexport const defaultRootState = {\r\n    inputForm: inputFormDefault,\r\n    resultPanel: resultPanelDefault,\r\n    resultAge: resultAgeDefault,\r\n    resultGender: resultGenderDefault,\r\n};\r\n\r\n// Create store\r\nconst store = createStore(rootReducer, defaultRootState, applyMiddleware(reduxThunk));\r\nexport default store;\r\n","// Services to analyze name\r\nimport crossFetch from \"cross-fetch\";\r\n\r\n/**\r\n * Predict age based on a name.\r\n * @param {string} name - Name to be analyzed\r\n * @param {*} country - Optional. Country of origin to improve accuray. Uses ISO 3166-1 alpha-2.\r\n */\r\nexport const analyzeNameForAge = async (name, country = null) => {\r\n    // Note: Country codes can be found in https://agify.io/our-data\r\n\r\n    // Determine the end point query params\r\n    let url = `https://api.agify.io?name=${name}`;\r\n    if (country) {\r\n        url = url + `&country_id=${country}`;\r\n    }\r\n\r\n    try {\r\n        // Send request\r\n        const response = await crossFetch(url);\r\n\r\n        if (!response.ok) {\r\n            return Promise.reject(\"Bad response in analyzing name for age.\");\r\n        }\r\n\r\n        // Parse the result\r\n        const result = await response.json();\r\n\r\n        // If result not valid, reject.\r\n        if (!result.age) return Promise.reject();\r\n\r\n        // Return \r\n        return result;\r\n    } catch (e) {\r\n        throw (e);\r\n    }\r\n}\r\n/**\r\n * Predict gender based on given name.\r\n * @param {string} name - Name to predict the gender.\r\n * @return {object} - Result  object with keys : `name`, `gender`, `probability`, and `count`.\r\n */\r\nexport const analyzeNameForGender = async (name) => {\r\n    // End point\r\n    const url = `https://api.genderize.io?name=${name}`;\r\n\r\n    try {\r\n        // Request\r\n        const response = await crossFetch(url);\r\n\r\n        // Return\r\n        if (!response.ok) {\r\n            return Promise.reject(\"Error when analyzing name for gender.\");\r\n        }\r\n\r\n        // Is the result data valid ?\r\n        const result = await response.json();\r\n        if (!result.gender) return Promise.reject();\r\n\r\n        return result;\r\n    } catch (e) {\r\n        throw new Error(\"Error in analyzing name for gender.\");\r\n    }\r\n}\r\n/**\r\n * Analyze a single word name and predict the nationality.\r\n * @param {string} name - Single word name for prediction.\r\n * @return {object  } - Object containing the result.\r\n */\r\nexport const analyzeNameForNationality = async (name) => {\r\n    // End point\r\n    const url = `https://api.nationalize.io?name=${name}`;\r\n\r\n    try {\r\n        // Request\r\n        const response = await crossFetch(url);\r\n\r\n        // Response\r\n        if (!response.ok) {\r\n            return Promise.reject(\"Error when analyzing name for nationality.\");\r\n        }\r\n\r\n        // Reject if response data is not valid.\r\n        const result = await response.json();\r\n        if (!result.country) return Promise.reject();\r\n\r\n        return result;\r\n    } catch (e) {\r\n        throw new Error(\"Error in analyzing name for nationality.\");\r\n    }\r\n}\r\n\r\nconst nameService = {\r\n    analyzeNameForAge,\r\n    analyzeNameForGender,\r\n    analyzeNameForNationality,\r\n}\r\nexport default nameService;\r\n","// Actions for <InputForm />\r\nimport actionTypes from \"../../actionTypes\";\r\nimport { analyzeNameForAge, analyzeNameForGender } from \"../../../services/nameService\";\r\n\r\n/**\r\n * Update the name input\r\n */\r\nexport const updateNameInput = (value) => {\r\n    return {\r\n        type: actionTypes.UPDATE_NAME_INPUT,\r\n        payload: value,\r\n    }\r\n}\r\n/**\r\n * Action creator. Submit input form.\r\n */\r\nexport const submitInputForm = (data) => {\r\n    return (dispatch) => {\r\n        dispatch(submitFormStarted(data));\r\n\r\n        // Analyze name for age\r\n        analyzeNameForAge(data)\r\n            .then(result => {\r\n                dispatch(analyzeAgeOk(result.age));\r\n            }).catch(e => {\r\n                dispatch(analyzeAgeError());\r\n            });\r\n\r\n        // Analyze gender\r\n        analyzeNameForGender(data).then((result) => {\r\n            dispatch(analyzeGenderOk(result.gender));\r\n        }).catch(() => {\r\n            dispatch(analyzeGenderError());\r\n        });\r\n    }\r\n}\r\nconst submitFormStarted = (name) => {\r\n    return {\r\n        type: actionTypes.SUBMIT_INPUT_FORM,\r\n        payload: {\r\n            name,\r\n        }\r\n    }\r\n}\r\nconst analyzeAgeOk = (age) => {\r\n    return {\r\n        type: actionTypes.ANALYZE_NAME_OK,\r\n        payload: age,\r\n    }\r\n}\r\nconst analyzeAgeError = () => {\r\n    return {\r\n        type: actionTypes.ANALYZE_NAME_ERROR,\r\n    }\r\n}\r\nconst analyzeGenderOk = (gender) => {\r\n    return {\r\n        type: actionTypes.ANALYZE_GENDER_OK,\r\n        payload: gender,\r\n    }\r\n}\r\nconst analyzeGenderError = () => {\r\n    return {\r\n        type: actionTypes.ANALYZE_GENDER_ERROR,\r\n    }\r\n}\r\n","import React, { useCallback } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport texts from \"../../../configs/texts\";\r\n\r\n/**\r\n * Form that ahndle input to analyze name\r\n */\r\nconst InputForm = (props) => {\r\n\r\n    // Handle change in name input\r\n    const onNameChange = props.onNameChange;\r\n    const handleNameChange = useCallback((e) => {\r\n        onNameChange(e.target.value);\r\n    }, [onNameChange]);\r\n    // Handle form submit\r\n    const onSubmit = props.onSubmit;\r\n    const handleSubmit = useCallback((e) => {\r\n        e.preventDefault();\r\n\r\n        // Submit only if name not empty\r\n        if (props.nameInput.value) onSubmit(props.nameInput.value);\r\n    }, [props.nameInput.value, onSubmit]);\r\n\r\n    return (\r\n        <form id=\"input-form\"\r\n            onSubmit={handleSubmit}\r\n        >\r\n\r\n            <p className=\"text-center text-muted\">Put in a name and we will predict..</p>\r\n\r\n            <div className=\"form-row\">\r\n\r\n                <div className=\"input-group input-group-lg\">\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder={texts.NAME_INPUT_PLACEHOLDER}\r\n                        className=\"form-control form-control-lg\"\r\n                        value={props.nameInput.value}\r\n                        onChange={handleNameChange}\r\n                    />\r\n                    <div className=\"input-group-append\">\r\n                        <button\r\n                            type=\"submit\"\r\n                            disabled={props.nameInput.value ? false : true}\r\n                            className=\"btn btn-lg btn-primary\"\r\n                        >{texts.SUBMIT_BUTTON_TEXT}</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </form >\r\n    )\r\n}\r\n\r\nInputForm.propTypes = {\r\n    nameInput: PropTypes.shape({\r\n        value: PropTypes.string.isRequired,\r\n    }).isRequired,\r\n    onNameChange: PropTypes.func.isRequired,\r\n    onSubmit: PropTypes.func.isRequired,\r\n}\r\nexport default InputForm;\r\n","// Connect <InputForm />\r\nimport { bindActionCreators } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { updateNameInput, submitInputForm } from \"./inputFormActions\";\r\nimport InputForm from \"./InputForm\";\r\n\r\n// Map global state to props\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        ...state.inputForm,\r\n    };\r\n}\r\n\r\n// Map action creators to props\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return bindActionCreators({\r\n        onNameChange: updateNameInput,\r\n        onSubmit: submitInputForm,\r\n    }, dispatch);\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(InputForm);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport texts from \"../../../configs/texts\";\r\n/**\r\n * Create text to show the result age.\r\n */\r\nexport const createResultText = (age, preText) => {\r\n    return `${preText}${age}`;\r\n}\r\n\r\n/**\r\n *  Component to show predicted age\r\n */\r\nconst ResultAge = (props) => {\r\n\r\n    // Show `msg` if not falssy.\r\n    if (props.msg) {\r\n        return <p>{props.msg}</p>\r\n    } else if (props.age) {\r\n        return <p>{createResultText(props.age, texts.RESULT_AGE_OK_PRE_TEXT)}</p>\r\n    }\r\n\r\n    // Default\r\n    return null;\r\n}\r\nResultAge.propTypes = {\r\n    // Status of the process. Possible values : `ok`, `error`.\r\n    status: PropTypes.string.isRequired,\r\n    // Message to show when `busy` (predicting process is running) or `error` (predicting process is error).\r\n    msg: PropTypes.string.isRequired,\r\n    // The predicted age.\r\n    age: PropTypes.number.isRequired,\r\n}\r\nexport default ResultAge;\r\n","// Connect the <ResultAge /> \r\nimport { connect } from \"react-redux\"\r\nimport ResultAge from \"./ResultAge\"\r\n\r\n// Tap in to the application state\r\nconst mapStateToProps = (state) => {\r\n    return state.resultAge;\r\n};\r\n\r\n// Connect\r\nexport default connect(mapStateToProps)(ResultAge);\r\n","import React from \"react\";\r\nimport ProptTypes from \"prop-types\";\r\nimport texts from \"../../../configs/texts\";\r\n\r\n/**\r\n * Create text to display predicted gender\r\n */\r\nexport const resultGenderOkText = (gender) => {\r\n    return `${texts.RESULT_GENDER_OK_PRE_TEXT}${gender}`;\r\n}\r\n\r\n/**\r\n * Component to show the predicted gender\r\n */\r\nconst ResultGender = (props) => {\r\n    // Is messsage available ?\r\n    if (props.msg) {\r\n        // Display message \r\n        return <p>{props.msg}</p>\r\n    } else if (props.gender) {\r\n        // Display gender\r\n        return <p>{resultGenderOkText(props.gender)}</p>\r\n    }\r\n\r\n    // Default\r\n    return null;\r\n}\r\nResultGender.proptTypes = {\r\n    // Possible values : `ok`, `error`\r\n    status: ProptTypes.string.isRequired,\r\n    //First priority to display\r\n    msg: ProptTypes.string.isRequired,\r\n    // The predicted gender. Second priority to display\r\n    gender: ProptTypes.string.isRequired,\r\n}\r\nexport default ResultGender;\r\n","// Connect the <ResultGender /> component\r\nimport { connect } from \"react-redux\";\r\nimport ResultGender from \"./ResultGender\";\r\n\r\n// Tapt into application state\r\nconst mapStateToProps = (state) => {\r\n    return state.resultGender;\r\n}\r\n\r\n// Connect\r\nexport default connect(mapStateToProps)(ResultGender);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport texts from \"../../../configs/texts\";\r\nimport ResultAgeContainer from \"../../molecules/ResultAge/ResultAgeContainer\";\r\nimport ResultGenderContainer from \"../../molecules/ResultGender/ResultGenderContainer\";\r\n\r\n/**\r\n * Component to show list of result\r\n */\r\nconst ResultPanel = (props) => {\r\n\r\n    // Initial content\r\n    let content = <div className=\"lead text-center text-muted\" style={{ margin: \"40px auto\" }}>{props.msg}</div>;\r\n    // If no `msg`, display the 'result' components\r\n    if (!props.msg) {\r\n        content = (\r\n            <div>\r\n                <h2>{ResultPanel.createHeaderText(props.name)}</h2>\r\n                <ResultAgeContainer />\r\n                <ResultGenderContainer />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div id=\"result-panel\" className=\"jumbotron\">\r\n            {content}\r\n        </div>\r\n    )\r\n}\r\n\r\n// Create header\r\nResultPanel.createHeaderText = (name) => {\r\n    return `${texts.RESULT_PANEL_HEADER_PRE_TEXT} for \"${name}\"`;\r\n}\r\nResultPanel.propTypes = {\r\n    // Message to show (mainly to be used when no result have been fetched). If falsy, will show list of result\r\n    msg: PropTypes.string.isRequired,\r\n    // The analyzed input name \r\n    name: PropTypes.string.isRequired,\r\n}\r\nexport default ResultPanel;\r\n","// Connect <ResultPanel /> component\r\nimport { connect } from \"react-redux\";\r\nimport ResultPanel from \"./ResultPanel\";\r\n\r\n// Tap to the application state\r\nconst mapStateToProps = (state) => {\r\n    return state.resultPanel;\r\n}\r\n\r\n// Connect\r\nexport default connect(mapStateToProps)(ResultPanel);\r\n","import React from \"react\";\r\nimport InputFormContainer from \"../organisms/InputForm/InputFormContainer\";\r\nimport ResultPanelContainer from \"../organisms/ResultPanel/ResultPanelContainer\";\r\n\r\n/**\r\n * Page to accept name & show result of name prediction.\r\n */\r\nconst NameAnalyzerPage = (props) => {\r\n\r\n    return (\r\n        <div className=\"row justify-content-center\">\r\n            <div className=\"col col-md-6\">\r\n                <header className=\"text-center\">\r\n                    <h1>Predict</h1>\r\n                </header>\r\n                <InputFormContainer />\r\n                <ResultPanelContainer />\r\n            </div >\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default NameAnalyzerPage;\r\n","import React from \"react\";\r\n\r\n/**\r\n * Footer component\r\n */\r\nconst Footer = () => {\r\n    return (\r\n        <footer >\r\n            <div className=\"row justify-content-center\">\r\n                <div className=\"col col-md-6\">\r\n                    <h2>About</h2>\r\n                    <p>This is a simple demo app utilizing third party APIs to predict a name.</p>\r\n                    <p>\r\n                        Front end tech stack : <code>React</code>, <code>Redux</code>,  <code>jest</code>, <code>testing-library</code>.\r\n                    </p>\r\n                    <p>\r\n                        Code can be found in :\r\n                        <a href=\"https://github.com/marsonparulian/name-analyzer\"\r\n                            target=\"_blank\" rel=\"noreferrer\"> Github repository </a>\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </footer>\r\n    )\r\n};\r\nexport default Footer;\r\n","import { Provider } from \"react-redux\";\nimport store from \"./components/store\";\nimport NameAnalyzerPage from \"./components/pages/NameAnalyzerPage\";\nimport Footer from \"./components/organisms/Footer\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store} >\n        <NameAnalyzerPage />\n      </Provider>\n      <Footer />\n    </div >\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}